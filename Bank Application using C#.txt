Bank Application using C#
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace Account_Application
{
    public delegate void EventWatch(double a, double b);
    public abstract class Account
    {
        private int id;
        private static int getid;
        private string name;
        private double balance;
        public event EventWatch performevent;
        public void onEvent(double a,double b)
        {
            if(performevent != null)
                performevent(a,b);
        }

        public int Id
        {
            get { return id; }
        }
        public string Name
        {
            get { return name; }
            set 
            { 
                if(value.Length> 2 && value.Length<15)
                        name = value;
                else
                {
                    throw new MyException("Please Enter Valid Name");
                }
            }
        }
        public double Balance
        {
            get { return balance; }
            protected set { balance = value; } // only child class can set value 
        }
        static Account()
        {
            Console.WriteLine("Bank of Spain");
        }
        public Account(string name, double balance)
        {
            if (id < 6)
                id = ++getid;
            else
                throw new MyException("Only Five Accounts Allowed");
            Name = name;
            Balance = balance;
        }
        public abstract void withdraw(double amt);
        public void Deposit(double amount) 
        {
            if (amount > 0)
                Balance += amount;
        }
    }
}
---------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Account_Application
{
    public class CurrentAccount : Account
    {
        public CurrentAccount(string name, double balance) : base(name, balance)
        {
        }

        public override void withdraw(double amt)
        {
            Balance -= amt;
            onEvent(Balance,amt);
        }
    }
}
--------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Account_Application
{
    public class SavingAccount : Account
    {
        private const double minbala = 1000;
        private static double InterestRate = 0.7;
        private double interest;

        public SavingAccount(string name, double balance) : base(name, balance)
        {
        }

        public override void withdraw(double amt)
        {
            if(Balance-amt>minbala)
            {
                Balance -= amt;
                onEvent(Balance,amt);
              
            }
            else
            {
                throw new MyException("Not Sufficient Balance");
            }
        }
        public static double Payinterest(SavingAccount savingAccount)
        {
            savingAccount.interest = savingAccount.Balance * InterestRate;
            savingAccount.Balance += savingAccount.interest;
            Console.WriteLine(savingAccount.Balance);
            return savingAccount.interest;
        }
    }
}
---------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Account_Application
{
    public class MyException:ApplicationException
    {
        public string sms;
        public MyException(string sms) 
        {
            this.sms = sms;
        }
    }
}
--------------------------------------------------------------------
using System.Collections.Generic;

namespace Account_Application
{
    internal class program
    {
        static void Main(string[] args)
        {
            List<Account> list = null;
            try
            {
                list = new List<Account>() {
                new CurrentAccount("Prasad",10000),
                new SavingAccount("Sourav",10000)
                };
            }
            catch (MyException e)
            {
                Console.WriteLine(e.sms);
            }
            foreach (Account account in list)
            {
                Console.WriteLine("Enter the Deposit : ");
                account.Deposit(Convert.ToInt32(Console.ReadLine()));
            }
            foreach (Account account in list)
            {
                Console.WriteLine("Enter the Withdraw : ");
                account.performevent += (a,b) => { Console.WriteLine("SMS : Your New Balance : {0}, Amount Withdraw : {1}",a,b); };
                account.performevent += (a,b) => { Console.WriteLine("Email : Your New Balance : {0}, Amount Withdraw : {1}",a,b); };
                account.withdraw(Convert.ToInt32(Console.ReadLine()));
            }
            foreach(Account account in list)
            {
                if (account.GetType() == typeof(SavingAccount))
                {
                    Console.WriteLine("Interest Payed : " + SavingAccount.Payinterest((SavingAccount)account));
                }  
            }
        }
    }
}
